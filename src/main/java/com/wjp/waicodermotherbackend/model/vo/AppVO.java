package com.wjp.waicodermotherbackend.model.vo;

import com.wjp.waicodermotherbackend.model.vo.UserVO;
import lombok.Data;

import java.io.Serializable;
import java.time.LocalDateTime;

/**
 * 应用视图对象
 * 
 * 该VO类用于向前端返回应用信息，是应用实体类(App)的视图层表示。
 * 相比实体类，VO类更适合数据传输，去除了敏感字段，增加了关联对象信息。
 * 
 * 主要特点：
 * 1. 数据展示：包含应用的基本信息和展示字段
 * 2. 关联信息：包含创建用户的详细信息
 * 3. 安全性：不包含敏感的内部字段（如逻辑删除标识）
 * 4. 前端友好：字段命名和类型适合前端使用
 * 
 * 使用场景：
 * - 应用列表页面展示
 * - 应用详情页面展示
 * - 应用搜索结果返回
 * - 用户个人应用列表
 * 
 * @author dhbxs
 * @since 2025/8/16
 * @version 1.0
 * @see com.wjp.waicodermotherbackend.model.entity.App
 * @see UserVO
 */
@Data
public class AppVO implements Serializable {

    /**
     * 应用唯一标识符
     * 
     * 该字段是应用的主键，用于唯一标识系统中的每个应用。
     * 前端使用这个ID进行应用的查询、编辑、删除等操作。
     * 
     * 特点：
     * - 全局唯一，不可重复
     * - 使用雪花算法生成，支持分布式环境
     * - 前端用于构建API请求的URL参数
     * 
     * @example 示例值：1234567890123456789
     */
    private Long id;

    /**
     * 应用显示名称
     * 
     * 该字段存储应用的用户友好名称，是用户识别应用的主要标识。
     * 应用名称在用户界面中广泛使用，如列表展示、搜索结果显示等。
     * 
     * 显示要求：
     * - 支持中文、英文、数字和常用符号
     * - 建议长度在2-50个字符之间
     * - 应该具有描述性，清楚表达应用功能
     * 
     * @example 示例值："个人博客系统"、"在线购物车"、"任务管理工具"
     */
    private String appName;

    /**
     * 应用封面图片
     * 
     * 该字段存储应用的封面图片URL或路径，用于在应用列表中提供视觉识别。
     * 封面图片可以提升用户体验，帮助用户快速识别不同的应用。
     * 
     * 图片要求：
     * - 支持常见的图片格式（JPG、PNG、GIF等）
     * - 建议尺寸适中，避免过大影响加载速度
     * - 可以是相对路径或完整的HTTP URL
     * 
     * @example 示例值："https://example.com/images/blog-cover.jpg"、"/static/covers/blog.png"
     */
    private String cover;

    /**
     * 应用初始化提示词
     * 
     * 该字段存储用户创建应用时输入的初始提示词，用于展示应用的创建意图。
     * 提示词可以帮助其他用户了解应用的设计思路和功能特点。
     * 
     * 内容特点：
     * - 描述应用的功能需求和设计目标
     * - 可能包含技术栈、设计风格等信息
     * - 支持多语言内容
     * 
     * @example 示例值："创建一个现代化的个人博客系统，使用Vue.js前端框架，支持响应式设计"
     */
    private String initPrompt;

    /**
     * 代码生成类型标识
     * 
     * 该字段标识应用使用的代码生成类型，前端根据此字段决定如何展示和处理应用。
     * 不同的代码生成类型对应不同的文件结构和预览方式。
     * 
     * 类型说明：
     * - HTML：单文件HTML应用
     * - MULTI_FILE：多文件项目（HTML+CSS+JS）
     * - 其他：根据业务需求扩展的类型
     * 
     * @see com.wjp.waicodermotherbackend.model.enums.CodeGenTypeEnum
     */
    private String codeGenType;

    /**
     * 应用部署标识键
     * 
     * 该字段存储应用部署后的唯一标识，用于构建应用的访问URL。
     * 前端使用这个标识来生成应用的预览和部署链接。
     * 
     * 使用场景：
     * - 构建应用预览URL
     * - 生成应用部署链接
     * - 应用访问权限控制
     * 
     * @example 示例值："deploy_20250816_123456"、"app_abc123_def456"
     */
    private String deployKey;

    /**
     * 应用部署时间
     * 
     * 该字段记录应用最后一次成功部署的时间，用于展示应用的部署状态和历史。
     * 前端可以根据此字段显示应用的部署信息和状态。
     * 
     * 显示格式：
     * - 支持多种时间格式展示
     * - 可用于计算部署间隔
     * - 帮助用户了解应用的活跃度
     * 
     * @example 示例值：2025-08-16T10:30:00
     */
    private LocalDateTime deployedTime;

    /**
     * 应用优先级数值
     * 
     * 该字段定义应用在系统中的优先级，用于控制应用的显示顺序。
     * 前端根据优先级对应用进行排序，优先级高的应用会优先显示。
     * 
     * 优先级规则：
     * - 数值越大，优先级越高
     * - 99：精选应用（最高优先级）
     * - 0：普通应用（默认优先级）
     * 
     * @example 示例值：99（精选应用）、50（高优先级）、0（普通优先级）
     */
    private Integer priority;

    /**
     * 创建用户的唯一标识
     * 
     * 该字段记录创建应用的用户ID，用于用户权限管理和应用归属管理。
     * 前端使用此字段控制用户对应用的访问权限和操作权限。
     * 
     * 权限控制：
     * - 只有创建者可以编辑和删除应用
     * - 支持用户查询自己创建的应用
     * - 用于构建用户个人应用列表
     * 
     * @example 示例值：123456
     */
    private Long userId;

    /**
     * 应用创建时间
     * 
     * 该字段记录应用被创建的时间，是应用生命周期的起点。
     * 前端使用此字段显示应用的创建历史，计算应用的年龄。
     * 
     * 显示用途：
     * - 应用列表中的创建时间列
     * - 应用详情页面的创建信息
     * - 应用统计和报表数据
     * 
     * @example 示例值：2025-08-16T09:00:00
     */
    private LocalDateTime createTime;

    /**
     * 应用最后更新时间
     * 
     * 该字段记录应用最后一次被更新的时间，用于展示应用的修改历史。
     * 前端可以根据此字段显示应用的更新状态和活跃度。
     * 
     * 更新场景：
     * - 应用信息被修改
     * - 代码重新生成
     * - 应用配置变更
     * 
     * @example 示例值：2025-08-16T16:20:15
     */
    private LocalDateTime updateTime;

    /**
     * 创建用户的详细信息
     * 
     * 该字段包含创建应用的用户的完整信息，是一个关联对象。
     * 前端使用此字段显示创建者的详细信息，如用户名、头像等。
     * 
     * 关联信息：
     * - 用户名和昵称
     * - 用户头像和基本信息
     * - 用户等级和权限信息
     * 
     * @see UserVO
     */
    private UserVO user;

    /**
     * 应用当前版本号
     * 
     * 该字段记录应用的当前版本号，用于版本管理和更新追踪。
     * 前端使用此字段显示应用的版本信息，支持版本比较和回滚。
     * 
     * 版本管理：
     * - 从1开始递增
     * - 每次编辑或更新时递增
     * - 支持版本历史查看
     * 
     * @example 示例值：1、2、3
     */
    private Integer version;

    /**
     * 序列化版本号
     * 
     * 该字段用于Java序列化机制，确保对象在不同JVM版本间的兼容性。
     * 当类的结构发生变化时，需要更新这个版本号。
     * 
     * 注意事项：
     * - 建议在类结构变更时手动更新
     * - 保持与数据库版本的一致性
     * - 便于版本控制和兼容性管理
     */
    private static final long serialVersionUID = 1L;
}
